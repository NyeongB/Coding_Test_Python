string = ["a", "ab", "abc"]

for i in string :
    print(hash(i))

>>  -4600563812084320951
    -9018392627289975125
    6234468088255173602


완전 고유한 값이 나옴 

##############################

result[a] = result.get(a, 0) + 1
딕셔너리에 저장할때 있으면 a의 밸류가 나오고 없으면 0이 나옴

a.keys()
a.values()
a.items()   # 전부 리스트로 반환됨

a[2] = "2" # 2라는 키값에 "2"라는 밸류 넣음

#################################################3

s = set([1,2,3])
s2 = set("hello")

set에 인덱스로 접근하려면 리스트나 튜플로 변경한 후 에 접근 가능

answer = 0

def check():
    global answer   #글로벌있어야지만 전역변수 컨트롤 가능
    answer +=1

check()
print(answer)
##############################################

a = [1,2,3]
b = a[:]    # 이렇게 안하면 주소값 복사라 참조변수만 다른 완전 동일한 메모리를 가르킴
b = copy(a)

##############################################
리스트를 문자열로 
a = ["ab","cd","ef"]

s = ":".join(a)
print(s)

##############################################
print('j' not in 'python')

print(1 in [2,3,4,5]) # 있나 없나 체크 가능

##############################################
a = [1,2,3,4]

result = [n * 3 for n in a if n % 2]
print(result)

print([x * y for x in range(2,10) 
        for y in range(1,10)])      # 리스트 내포 사용하기

#################################################3
a =[1,2,3,4,5,6,7]

for i in a :
    print(a[i:])
    print(a[i:][::-1]) # 거꾸로 출력 슬라이싱 하면서

#####################
# 진법 변환

num = 13
jin = 2
answer = ""

while num > 0:
    r = num % jin
    num = int(num / jin)
    answer = str(r) + answer

print(answer)

######################
bin(13)
oct(13)
hex(13)
문자열로 반환됨

###################################
하나 쓸떄는 그냥 for i in a: 가능한데 인덱스랑 값 쓸꺼면 

a = [2,1,3,2]

for i, v in enumerate(a):
    print(i)
    print(v)

list_1 = [(v,i) for i, v in enumerate(a)]   # 이런 식으로 리스트만들수있음 

print(list_1)
//
from collections import deque

queue = deque([(v,i) for i, v in enumerate(a)]) # 이런식으로 인덱스와 값을가진 큐도 만들수있음

print(queue)
    